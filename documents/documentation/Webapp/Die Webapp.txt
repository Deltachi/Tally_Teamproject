4.3	Die Webapp—Das Interface zur Einsicht und Konfiguration aller Daten

4.3.1 Erste Konzeption

Zur  Kontrolle der Daten und aller Benutzerkonten haben wir uns entschieden, eine Web Applikation zu entwickeln, die Zugriff auf die Datenbank nehmen kann, um deren Informationen anzuzeigen / bearbeiten / löschen und ggf. neue Datensätze hinzufügen kann. Zudem soll dies dadurch vereinfacht werden indem die Applikation für einige Einträge Vorschläge für Werte macht bzw. ausfiltert, falls ungültige Eingaben getätigt werden. Die App soll verschiedene Sicherheitsbereiche besitzen, die nur Erreichbar sind, falls ein Nutzer angemeldet ist. Administrative Bereiche sollen bei gegebener Sicherheitsfreigabestufe (Eintrag  'Rights' in der 'Users' Tabelle der Datenbank) in die vorhandene Website eingebettet werden um unnötige Doppelungen von Bereichen zu vermeiden bzw. die Benutzung der App weiter zu erleichtern.


4.3.2 Ziele zur Bedienung und der Benutzeroberfläche

Der User soll ohne Anmeldung Zugriff auf die Bereiche 'Home' und 'Menu' haben. Dabei beinhaltet Home allgemeine Informationen und Neuigkeiten zur Seite, sowie sonstige Infos. Der Menübereich beinhaltet lediglich aktuelle Angaben zu verfügbaren Speisen ohne weiteren Zugriff in Form von Bestellungen oder Ähnliches. Sobald sich der User angemeldet hat, verschwindet der Login-Button und wird von einem User-Dropdown abgelöst, in dem der User Links zu den Bereichen 'Notifications', 'Leaderboard', 'Settings', 'Favorites' und den Logout erhält.  Es wird sichergestellt, dass der Client keinen Zugriff auf Daten bekommt bevor dieser die benötigten Userdaten zum Anmelden abgeschickt hat. Im Notifications-Bereich kann der User seinen Kontostand, Nachrichten und letzte Einkäufe einsehen. Das Leaderboard dient nur Kosmetischen Unterhaltungszwecken und zeigt die Top 5 der Kilokalorien / Koffein Konsumenten, die dieses Feature aktiviert haben. In den Settings kann der User seine persönlichen Daten bearbeiten. Im Favorites-Tab kann er Favoriten aussuchen, die in der Schnellauswahl am Raspberry Pi angezeigt werden. Der Logoutbereich entfernt alle gespeicherten Userdaten vom Client und trennt die aktive Sitzung. Der Admin hat folgende zusätzliche Features: Es werden im Menü Admin-Bedienelemente eingebettet, er hat einen separaten Bereich, um Userstatistiken einzusehen (Layout ist ähnlich dem Menü), wo er diese auch bearbeiten / löschen, oder neue User hinzufügen kann. 


4.3.3 Umsetzung

Zu den Bereichen der Entwicklung gehören zum einen die Grundsprachen HTML5, CSS, JavaScript PHP und SQL, jedoch werden weitere Frameworks, Plugins und Erweiterungen benutzt, wie: jQuery-1.11.2, Mustache v2.1.2, Bootstrap-3.3.4, AngularJS v1.4.3-build.4096, Angular-UI-Router v0.2.15 und UI-Bootstrap-tpls-0.13.0.
In der ersten Version der Webapp, wurde ein Grundgerüst mit HTML5 CSS und Bootstrap erstellt. Der Fokus lag dabei beim Design und der Anordnung aller Elemente, die leichte Bedienbarkeit und eine selbsterklärende Grafische Benutzeroberfläche. Außerdem wird jeder Build auf Responsive Design getestet, was zum Ergebnis hat, dass man die Webapp von allen Browsern auf Desktops und auch auf mobilen Geräten in einem ansprechenden Layout anzeigen kann. Das wird mit Hilfe von Bootstraps Libraries deutlich einfacher umzusetzen. Da der RaspberryPi sich möglicherweise innerhalb eines Intranetzes, ohne Internetzugriff befindet (und der Webserver sich wiederum auf dem Pi befindet), muss dafür gesorgt werden dass die Libraries auch offline zur Verfügung stehen.

 Hier ein Code-Auszug der die offline Daten in das Projekt lädt:
\begin{frame}
\begin{lstlisting}
<html ng-app='app'>
	<head>
		<title>Tally C&amp;S</title>		
		
		<!-- Latest compiled and locally saved CSS bootstrap -->
		<link rel='stylesheet' href='styles/bootstrap-3.3.4-dist/css/bootstrap.css'>

		<!-- Optional theme (locally saved) -->
		<link rel='stylesheet' href='styles/bootstrap-3.3.4-dist/css/bootstrap-theme.css'>
	</head>
	<body class='color-bg'> 
<!-- Plugins and Services -->
			<!-- jQuery (necessary for Bootstrap's JavaScript plugins. Saved on Drive) -->
			<script src='scripts/jquery-1.11.2.js'></script>
			<!-- Latest compiled and locally saved JavaScript from Bootstrap -->
			<script src='styles/bootstrap-3.3.4-dist/js/bootstrap.js'></script>
			<!-- <script src='mustache/mustache.js'></script> -->
			<script src='angular/angular.js'></script>
			<script src='angular-ui-router/build/angular-ui-router.js'></script>
			<script src='ui-bootstrap/ui-bootstrap-tpls-0.13.0.js'></script>

		<!-- End Plugins and Services -->
	</body>
</html>
\end{lstlisting}
\end{frame}

Um ein breiteres Spektrum zur DOM Traversal zu bekommen wurde jQuery in das Projekt eingebunden. Event-Listeners und Callbacks für z.B. Buttons sind somit einfach zu realisieren. Hier ist ein Codebeispiel für einen einfachen Button und ein Event-Listener in jQuery:

HTML Code:
\begin{frame}
\begin{lstlisting}
	<button id='button1' class='btn btn-default'>This is a button</btn>
\end{lstlisting}
\end{frame}

jQuery Code:
\begin{frame}
\begin{lstlisting}
	$(function(){
		// DOM Element - Event  -  Callback
		$('#button1').on('click', function(){
			//Callback function
			alert('Button wurde gedrückt!');
		});
	});
\end{lstlisting}
\end{frame}

Beim Drücken des Buttons öffnet sich ein Alert-Fenster in dem steht: 'Button wurde gedrückt!'. 

Nach mehrfachen hinzufügen von HTML Seiten fiel auf, dass es zur ständigen Wiederholung einzelner Elemente wie z.B. der Navigationsleiste kommt, was bedeutet, dass man bei einer Änderung die selbe Codeänderung in jeder Datei durchführen muss. Deshalb wurde das Mustache.js-Plugin zum Projekt hinzugefügt. Dies stellt einige Funktionen zum Templating von HTML Code zur Verfügung, welche den Code um einiges schrumpfen würde. Doch wurde Mustache nach kurzem Tests von Angular.js abgelöst, das teilweise die gleichen Funktionen wie Mustache besitzt (zum Thema Templating). Das größte Feature von Angular ist die Erstellung einer Single-Page-Webapp. Anstelle vieler verschiedener HTML Dateien (für z.B. 'Home','Login','Menu') zwischen denen hin und her gesprungen wird, was ein ständiges nachladen aller Elemente bedeutet, bietet eine SPA den Vorteil das es nur eine Index.html Datei gibt in die eine app.js geladen wird und all ihre Komponenten. Von da aus lädt sich die App per Ajax (Asynchrones Java und XML) Templates, Controller, Services und Daten aus dem Backend dynamisch, während die Webapp geladen ist.
Die index.html wird somit zur Build Datei der App die die Komponenten der Webapp vereint und anschließend ausführt. Die Darstellung der Seite wird mit Directives zugewiesen, die sich in den Custom Tags von HTML5 befinden. Ein Beispiel für die Directives und dem Build der App in Codeform:

\begin{frame}
\begin{lstlisting}
	<html ng-app="app">
		<head>
			<title>Tally C&amp;S</title>		
			
			<!-- Laden der Stylesheets und anderes...-->
			
		</head>

		<body class="color-bg">

			<div id="wrap">

				<!-- Directive für die Navigationsleiste-->
				<my-navbar></my-navbar> 

				<!-- Directive für das Login ModalFenster-->
				<login></login>

				<!-- Directive für den Body oder View der Seite-->
				<div ui-view></div>

			</div> <!-- close wrap -->

			<footer id="footer" class="text-center">

				<!-- Directive für die Fußleißte-->
				<my-footer></my-footer>
			</footer>
			
			<!-- Plugins and Services -->
				<!-- jQuery (necessary for Bootstrap's JavaScript plugins. Saved on Drive) -->
				<script src="scripts/jquery-1.11.2.js"></script>
				<!-- Latest compiled and locally saved JavaScript from Bootstrap -->
				<script src="styles/bootstrap-3.3.4-dist/js/bootstrap.js"></script>
				<!-- <script src="mustache/mustache.js"></script> -->
				<script src="angular/angular.js"></script>
				<script src="angular-ui-router/build/angular-ui-router.js"></script>
				<script src="ui-bootstrap/ui-bootstrap-tpls-0.13.0.js"></script>

			<!-- End Plugins and Services -->

			<!-- Build; Hier werden alle Elemente der App geladen-->
				<script src="scripts/app.js"></script>
				<script src="scripts/directives/myNavbar.js"></script>
				<script src="scripts/directives/login.js"></script>
				<script src="scripts/directives/myFooter.js"></script>
				<script src="scripts/directives/menuModal.js"></script>
				<script src="scripts/controllers/userCtrl.js"></script>
				<script src="scripts/controllers/menuCtrl.js"></script>
				<script src="scripts/controllers/loginCtrl.js"></script>
				<script src="scripts/controllers/loginModalCtrl.js"></script>
				<script src="scripts/controllers/updatedCtrl.js"></script>
				<script src="scripts/controllers/logoutCtrl.js"></script>
				<script src="scripts/controllers/lbCtrl.js"></script>
				<script src="scripts/services/myService.js"></script>
				<script src="scripts/services/userDataService.js"></script>
				<script src="scripts/services/menuService.js"></script>
				<script src="scripts/services/loginService.js"></script>
				<script src="scripts/services/loginModalService.js"></script>


			<!-- End Build -->

			<script src="scripts/main.js"></script>
		</body>
	</html>

\end{lstlisting}
\end{frame}

Innerhalb von app.js wird die App wie folgt gebaut:

\begin{frame}
\begin{lstlisting}
	
	var app = angular.module('app',[
		'ui.router',
		'ui.bootstrap',
		'app.directives.myNavbar',
		'app.directives.myFooter',
		'app.directives.login',
		'app.directives.menuModal',

		'app.controllers.userCtrl',
		'app.controllers.menuCtrl',
		'app.controllers.loginCtrl',
		'app.controllers.loginModalCtrl',
		'app.controllers.updatedCtrl',
		'app.controllers.logoutCtrl',
		'app.controllers.lbCtrl',

		'app.services.myService',
		'app.services.userDataService',
		'app.services.menuService',
		'app.services.loginService',
		'app.services.loginModalService'

		]);
\end{lstlisting}
\end{frame}

Dabei stellt alles, das sich in dem Array befindet, eine Dependency dar, die vor der Ausführung der App geladen werden muss.

Zum Routing auf der Website wurde der Angular-UI-Router ins Projekt eingebunden. Er ermöglicht das Filtern vom User eingegebenen/ausgewählten Routen nach Authentifikation und Authorisierung und ungültigen Pfaden. 
Wenn der User im Begriff ist einen Bereich zu betreten der eine Authentifikation benötigt wird überprüft ob Userdaten vorhanden sind mit denen sich der Client identifizieren kann. Falls nicht aka der Client nicht angemeldet ist wird kein Aufruf zum Backend gestartet, sondern der Client zum Home-Bildschirm weitergeleitet mit der Bitte, sich anzumelden.
Hier der Code für das Routing:

\begin{frame}
\begin{lstlisting}
	//UI-ROUTER
	app.config(['$urlRouterProvider','$stateProvider',function($urlRouterProvider, $stateProvider) {
		$urlRouterProvider.otherwise('/');
		$stateProvider
			.state('/', {
				url: '/',
				templateUrl: 'ng-templates/home.html',
				data: {
					requireLogin: false 
				}
			})
			.state('home', {
				url: '/home',
				templateUrl: 'ng-templates/home.html',
				data: {
					requireLogin: false 
				}
			})
			.state('menu', {
				url: '/menu',
				templateUrl: 'ng-templates/menu.html',
				data: {
					requireLogin: false 
				}
			})
			.state('app' ,{
				abstract: true,
				data: {
					requireLogin: true //this property will apply to all children of 'app'
				}
			})
			.state('notifications', {
				url: '/notifications',
				templateUrl: 'ng-templates/notifications.html',
				data: {
					requireLogin: true 
				}
			})
			.state('leaderboard', {
				url: '/leaderboard',
				templateUrl: 'ng-templates/leaderboard.html',
				data: {
					requireLogin: true 
				}
			})
			.state('settings', {
				url: '/settings',
				templateUrl: 'ng-templates/settings.html',
				data: {
					requireLogin: true 
				}
			})
			.state('favorites', {
				url: '/favorites',
				templateUrl: 'ng-templates/favorites.html',
				data: {
					requireLogin: true 
				}
			})
			.state('logout', {
				url: '/logout',
				templateUrl: 'ng-templates/logout.html',
				controller: 'logoutCtrl',
				data: {
					requireLogin: true 
				}
			})
	}]);
\end{lstlisting}
\end{frame}

URLs werden nicht als tatsächliche URL behandelt sondern in einen State verwandelt. Wenn der User also zur URL '/home' weitergeleitet wird, ändert sich der State zu 'home' und es werden die benötigten Templates und Controller geladen.

Ein Template mit Controller sieht in Angular wie folgt aus:

HTML:
\begin{frame}
\begin{lstlisting}
	<div ng-controller="mainController as myController">
		<h1>{{myController.template}}</h1>
	</div>
\end{lstlisting}
\end{frame}

Angular.js
\begin{frame}
\begin{lstlisting}
	app.controller('mainController', function(){
		this.template = "Hier steht der Templatetext!"
	})
\end{lstlisting}
\end{frame}

Die Ausgabe sieht dann so ähnlich aus:
\begin{frame}
\begin{lstlisting}
	Hier steht der Templatetext!
\end{lstlisting}
\end{frame}

Im Controller kann man nun Funktionen und Zuweisungen schreiben mit denen man im HTML Code arbeiten kann. Zudem kann man im Funktionskopf Dependencies bestimmen, wie z.B. andere Services oder den $scope um das 'this' weglassen zu können.

Das Backend wird mit PHP realisiert. Dabei stehen mehrere PHP Scripts mit eingeschränkten Funktionsumfang zur Verfügung um entweder aus der SQlite Database zu lesen, oder Zeilen zu updaten/einfügen/löschen. Wie so ein Datenbank-Zugriff in einem PHP Script aussieht wird im folgenden Codeausschnitt dargestellt:

\begin{frame}
\begin{lstlisting}
	<?php
		try {
		    // Use database file "database.sqlite" 
		    $db = new PDO('sqlite:../../sqlite/database.sqlite');
		    
		    // Throw exceptions on error
		    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

		    $name = $_POST["request"];	//must be Username

		    //Vorzeitiges erstellen der Query um injection-attacks zu vermeiden
		    $query = "SELECT * FROM Users WHERE Username = '".$name."'";

			$results = $db->query($query);

			$rows = $results->fetchAll(PDO::FETCH_ASSOC);
			$data = array();

			foreach ($rows as $rowKey => $row) {
				$data[] = $row;
				break;	//Break after 1 result. Should do that automatically, since Username is UNIQUE
			}
			echo json_encode($data);	//Convert the data to a JSON String since we use JSON as Object format
		    $db = NULL;		// Close database

		} catch(PDOException $e) 	{
		    echo "ERROR you noob :P -> ";
		    echo $e->getMessage();
		    echo $e->getTraceAsString();
		}
	?>	
\end{lstlisting}
\end{frame}

Diese Methode des seperierten Statement-Erstellen und folgenden Ausfüren bietet relativ guten Schutz vor Injektions-Angriffen, bei denen man die Variablen der Abfrage ändert und somit den Query zwecksentfremdet und an Daten kommt, die man schützen wollte.
Nun wird ein Service geschrieben, der dem Backend die Request-Daten schickt, die Antwort abfängt und diese in ein Object erstellt.
Das wird mit Angular-Services realisiert, die im Folgenden beschrieben werden:
\begin{frame}
\begin{lstlisting}
	angular.module('app.services.userDataService', []) 
	

		.factory("userDataService", function($http){
			
			//Dummy Daten, falls es zu einem Fehler kommt um undefinierte Zustände zu vermeiden
			var userData =  {
				"firstname": "Unknown",
				"lastname": "Intruder",
				"username": "(no name)",
				"password": "0000",
				"mail": "nomail@me.com",
				"leaderboard": true,
				"balance": -6.66,
				"messages": [
					{"Sender":"System","Type":"alert-danger","Title":"Hey, intruder","Message":"I'm watching you."},
				],
				"history": [
					{"history_id":"0", "title": "No recent purchases", "price":"","date": ""},
					
				],
				"favorites": [
					{"favorite_id":"0", "title": "Kaffee L", "price":"1.50"},
					{"favorite_id":"1", "title": "Cappuchino", "price":"1.20"},
					{"favorite_id":"2", "title": "Snickers", "price":"0.50"},
					{"favorite_id":"3", "title": "Kaffee M", "price":"1"},
					{"favorite_id":"4", "title": "Macchiato", "price":"1.50"}
				]
			};

			//Funktionen zum getten und setten dieser Userdaten
			function getUserData() {
				return userData;
			}
			function setUserData(newData) {
				userData = newData;
			}
			return {
				getUserData: getUserData,
				setUserData: setUserData,
			
				//Diese Funktion wird aufgerufen um Daten vom Backend anzufordern
			  	getUserDataSync: function(postData){

				  			//Hier wird der Ajax Befehl vorbereitet
				  	return	$.ajax({
								type: "POST",
								async: false,
								url: "/apis/users/getUserData.php",
								data: postData, 
								success: function(response){
					  				console.log("Successful service request: getUserDataSync");
									return response.data;	//Daten werden zum ausführenden Controller zurückgegeben
								},
								//Fehlerbericht im Falle eines Backend-Errors
								error: function(jqXHR, status, errors){
									console.log("Error service request");
									console.log(status);
								}
							});
				},
					
			}
		});
\end{lstlisting}
\end{frame}

In den Servicefunktionen zum Datenfetching aus dem Backend werden im Falle eines Fehlers ein ausreichender Fehlerbericht in die Console ausgegeben. Dieser reicht meißtens aus um die Fehlerquelle zu lokalisieren.

4.3.4 Probleme / Schwierigkeiten

Ein Problem ist, dass man alle Daten aktuell halten muss, die sich bei jeder Benutzereingabe ändern können.
Um dies zu gewährleisten, müssen Variablen unter $watch gestellt werden oder im $rootScope abgespeichert werden, was Ressourcen kostet, die im kleinen Umfang jedoch umbeträchtlich sind.
Zudem muss man seht genau auf Timing achten, da es keine Refreshes oder sonstige Events gibt, die Änderungen von Daten Triggern. Ajax bedeutet auch, dass Daten evtl. erst dann fertig geladen werden wenn das Template schon eingesetzt wurde. Das kann aber mit angulars eigenen Tags und Attributen umgangen werden, indem man z.B. anstatt 'src=' die Angular-Variante 'ng-src=' benutzt, welche darauf ausgelegt ist, die Daten später zu erhalten.
 
4.3.5 Verbesserungen / Änderungen für die Zukunft

In Zukunft muss der Code deutlich sauberer gemacht werden und auskommentierter Code, der für Testzwecke drin geblieben ist, muss entfernt werden. Außerdem können Verbesserung zum Thema Sicherheit gemacht werden. Dazu gibt es noch etliche Angular-Funktionen und Angular-PlugIns. Letztendlich kann mit dem BootstrapUI-Plugin Bootstrap besser mit Angular verbunden werden, jedoch fehlte die Zeit um den Code zum wiederholten mal umzustrukturieren.
