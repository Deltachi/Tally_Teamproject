4.X 
Als Programmierumgebung, für den Raspberry Pi 2, wurde Qt gewählt.
Qt ist eine Klassenbibliothek von C++ und bietet die Programmierung für  graphische Benutzeroberfläche und Datenbankfunktionen.
Wir arbeiten mit der Version 4.8.1 von Qt, da neuere Versionen noch nicht mit dem Raspberry Pi 2 kompatibel sind.
Als Debugger haben wir GNU gdb 7.8 für MinGW 4.9.1 gewählt.

Programmiert wird hauptsächlich auf einem PC, da dieser schneller debuggen kann.
Darüber hinaus musste der Raspberry PI 2 noch konfiguriert werden, wie in 4.1 beschrieben, wodurch ein zeitgleiches arbeiten erschwert wäre.
Es wurde sich darauf geeinigt das Programm zu Demonstrationszwecke, während den Teammeetings, auf dem Raspberry PI 2 laufen zu lassen.
Zum Ende des Projekts, sobald die Konfiguration beendet ist, sollten wir denn Raspberry PI 2 bekommen um die Benutzeroberfläche letztendlich anpassen zu können.

Als erstes haben wir erste Grundzüge der Benutzeroberfläche thematisiert. Letztendlich haben wir eine herausgearbeitet, welche in dem Plichtenheft zu sehen ist.
Außerdem wurden mehrere Strukturen für das Hauptprogramm besprochen und haben uns auf einen Automaten geeinigt. Näheres dazu findet sich in dem Unterpunkt Aufbau des Programmes.
Daraufhin wurde sich in Qt eingelesen und die ersten Funktionen für den Login-Screen programmiert.
Wie bereits in Abschnitt 4.1 erklärt, wurde entschieden das Display zu wechseln.
Außerdem ist uns Aufgefallen das  sehr viele Klicks gebraucht werden um eine Kaufvorgang abzuschließen, was Benutzerunfreundlich ist.
Aus diesen beiden Gründen wurde die komplette Benutzeroberfläche überarbeitet.
Die Knopfgröße und die Schriftgröße mussten vergrößert werden als auch das Knöpfe, aufgrund Platzmangels, weggelassen werden mussten.
Die Screens sollten aber erst beim Programmieren festgelegt werden  um evtl. Hürden zu meistern.
Außerdem wussten wir zu diesem Zeitpunkt noch nicht, welches Display für den Raspberry Pi 2 gewählt wird.
Die endgültige Benutzeroberfläche befindet sich unter dem Unterpunkt Funktionen des Programmes.

Nach dem die ersten Funktionen des Login-Screens und des Passwort-Screen implementiert wurden, wurde begonnen die Datenbank mit einzuarbeiten.
Aus Abschnitt 4.1 geht heraus, dass wir uns für SQLite entschieden haben. Um auf diese zuzugreifen, mussten wir uns zunächst darauf einigen welche Tabellen angelegt werden  und womit diese befüllt werden.
Eine genaue Beschreibung der Datenbank befindet sich unter Abschnitt 5.XXX .
Nachdem wir uns auf die Datenbank geeinigt haben, wurde diese in das Programm implementiert.
Zu diesem Zeitpunkt wurde noch nicht mit einer eindeutigen ID jedes Benutzer gearbeitet sondern mit seinem Namen, was später zu Komplikationen führen würde.
Zeitgleich zum Login-Screen und dem Passwort-Screen wurden alle, die bis zu diesem Zeitpunkt erarbeitete Screen oberflächlich implementiert.
So konnten man zu diesem Zeitpunkt sich anmelden, (die Daten dafür wurden aus der Datenbank genommen) und konnte sich über alle Screens klicken, auch wenn die meisten keine Funktionen hatten.

Nachdem das Grundgerüst des Programmes stand, wurde um die Kauffunktion implementieren zu können, die ID die der eingeloggten Person global im Programm bekannt gemacht werden .
Dies haben wird entweder über get-Funktionen realisiert oder beim Erzeugen eines neuen Screens mitgegeben.
Daraufhin konnten die restlichen Funktionen implementieren werden.
Als erstes wurden die Tabellen implementiert in welche alle kaufbaren Artikel aufgelistet werden.
Die Information über die Artikel konnten über die Datenbank in Erfahrung gebracht werden.
Nachdem die Tabellen mit Artikeln vorhanden waren, wurde mit dem Hauptaspekt des Programmes begonnen, dem Kaufvorgang.

Für den Kaufvorgang ist hauptsächlich das Shoppingcart verantwortlich. Sobald ein Artikel dort liegt, wird es immer auf dem rechten Teil des Bildschirmes angezeigt.
Außerdem ist es dafür verantwortlich, dass wenn Artikel gekauft werden, den Kaufvorgang abzuschließen.
Dies bedeutet vor allem, dass die Datenbank mit neuen Informationen gefüllt wird. Einerseits wird die Anzahl der entsprechenden Artikel geändert und das Konto des Käufers belastet.
Dies bürgte eine große Hürde. Das Problem mit der Synchronität des Shoppingcart über den gesamten Einkauf.
Jedes Mal wenn der Zustannd gewechselt wurde(siehe Aufbau des Programmes), wurde das Shoppingcart gelöscht und damit auch der Inhalt.
Das Shoppingcart ist ein eigenständiges Teil Programmes und somit sollte es unabhängig sein, wenn sich der Zustand des Programmes ändert.
Dies tut es allerdings nicht und wird jedes Mal gelöscht, wenn sich der Zustand ändert.
Da wir das Problem nicht finden konnten, warum es sich jedes Mal mit löscht, wird nun beim Verlassen des Zustandes eine Liste mitgegeben in der alle Artikel gespeichert sind die im Shoppingcart lagen.
Mit dieser Liste wird ein neues Shoppingcart erzeugt in der diese Artikel liegen.

Nachdem diese Hürde genommen wurde, gab es nur noch wenige Funktionen die noch implementiert werden mussten.
Bis zu diesem Zeitpunkt wurde das Programm fast ausschließlich auf einem PC programmiert, debugt und auch die Größen wurden auf diesen angepasst, wie bereits anfangs erwähnt.
Deswegen war der nächste Schritt die Benutz Oberfläche, mit dem Raspberry PI 2 und dem neuen Display, anzupassen.
Zusätzlich wurde auch der Barcode Scanner implementiert, was kein Problem dargestellt hat, da sich das Signal des Barcode Scanners verhält wie ein Tastendruck mit der Tastatur. Qt stellt für solche Signale bereits Funktionen.
Somit war das Programm so gut wie fertig. Es fehlten nur noch ein paar kleine Funktionen und vor allem musste noch eventuelle Bugs entfernt werden.
Alle Funktionen des Programmes wurden nicht während dieses Abschnittes erfasst, da dies den Umfang dieser Dokumentation sprengen würde.
Alle wichtigen Funktionen wurde erwähnt und gegebenenfalls erläutert, vor allem in dem Abschnitt Funktionen des Programmes werden alle wichtigen erwähnt und was das Programm leistet.



4.XXX Aufbau des Programmes
Das Programm wurde in 12 Klassen unterteilt.Im folgendem werden die einzelnen Klassen erläutert.
Allgemein lässt läuft das Programm nach einem Automaten ab. Bildschirm wurde in Teilbereiche unterteilt, wodurch nicht bei jedem Zustandswechsel der komplette Bildschirm neu geladen werden muss, sondern nur die betreffenden Teile.
Dadurch Teilen wir den Bildschirm in drei Teile. Die Kopfteil,linker Teil und rechter Teil. Näheres dazu wird in den dementsprechenden Klassen erläutert.
main.cpp :
	Die main.cpp ist verantwortlich für den Ablauf des Programmes. Die Struktur dafür ist aufgebaut wie ein Mealy-Automat.In den Zustanänden sind die jeweiligen möglichenkeien aus diesem Zustand herauszukommen.
	Dies wird realisiert durch den exitcode des aktuellen Screen, welche zurückgegeben wird, wenn das passende Event dazu geschehen ist(Bsp. Knopf gedrückt).
	Zustände:
		0 : Es wird der Login-Screen auf dem Bildschirm gezeigt.
			Exitcode: 
				10 : Es wurde der Benutzer gewählt und möchte sich nun mit dem Account anmelden.
				!10 & !100 : Das Programm beendet sich.
				
		1 : Es wird der Passwort-Screen auf dem Bildschirm angezeigt.
			Exitcode:
				20 : Es wurde auf den "Back" Knopf gedrückt gelangt in Zustand 0.
				21 : Das Passwort wurde korrekt eingegeben und man gelangt zum Coffee/Sweet/Scan Menü.
				!20 & !21 & !100 : Das Programm beendet sich.
				
		2 : Es gibt die Auswahlpunkte zwischen Coffee/Sweets/Scan als auch die Favoriten oder das Shoppingcart.
			Exitcode:
				31 : Es wurde auf "Coffee" geklickt und man gelangt zur Getränkeliste mit dem Shoppingcart.
				32 : Es wurde auf "Sweets" geklickt und man gelangt zur Süßigkeitenliste mit dem Shoppingcart.
---->        	33 : Es wurde auf "Scan" geklickt und man wird ins Scan-Menue geleitet mit dem Shoppingcart.
				34 : Es wurde ein Artikel gescannt und wird in das Scan_Menue geleitet mit dem Shoppingcart.
				99 : Es wurde auf "Buy" geklickt. Der Kaufvorgang wird beendet. Die Datenbank wird aktgualisiert und man wird in den afterbuyscreen geschickt.
				!31 & !32 & !33 ! & !34 & !99 & !100 & !98 : Das Programm beendet sich.
				
		3 : Es wird die Getränkeliste mit dem Shoppingcart gezeigt.
			Exitcode:
				51 : Es wurde auf "Back" geklickt und man wird in Zustand 2 gesetzt.
				99 : Es wurde auf "Buy" geklickt. Der Kaufvorgang wird beendet. Die Datenbank wird aktgualisiert und man wird in den afterbuyscreen geschickt.
				98 : Ein Artikel wurde aus dem Warenkorb entdfernt.
				
		4 : Es wird die Süßigkeitenliste mit dem Shoppingcart gezeigt. 
			Exitcode:
				51 : Es wurde auf "Back" geklickt und man wird in Zustand 2 gesetzt.
				99 : Es wurde auf "Buy" geklickt. Der Kaufvorgang wird beendet. Die Datenbank wird aktgualisiert und man wird in den afterbuyscreen geschickt.
				98 : Ein Artikel wurde aus dem Warenkorb entdfernt.
			
		5 : Es wird das Scan-Menue angezeigt.
				51 : Es wurde auf "Back" geklickt und man wird in Zustand 2 gesetzt.
				99 : Es wurde auf "Buy" geklickt. Der Kaufvorgang wird beendet. Die Datenbank wird aktgualisiert und man wird in den afterbuyscreen geschickt.
	
Dafür haben wir eine QListWidget ,da diese mit QListWidgetItem's gefüllt werden kann welche alle Informationen über ein Artikel speichern kann.
Ein QListWidgetItem kann man sich vorstellen wie ein Array an dessen Position spezielle Werte gespeichert werden.
In unserem Fall stehen FOlgende Werte in dem QListWidgetItem:

- Der Name der Artikels wird der Name des QListWidgetItem's (item->setText(name);)
- Das Bild des Artikels hat einen extra Platz im QListWidgetItem (item->setIcon(picture);)
- An der vierten Stelle wird die Artikel ID gespeichert (item->setData(4,itmeID);)
- An der fünften Stelle wird der Preis des Artikels gespeichert (item->setData(5,price);)
- An der sechsten Stelle wird die Menge gespeichert die noch vorrätig ist (item->setData(5,amount);)

An den ersten drei Stellen sind wir uns nicht sicher was dort gespeichert wird.
Wir können nichts darauf expliziet speichern und wenn wir ausgeben lassen was dort gespeichert ist, bekommen wir einen leeren String zurück.
4.XXX Funktionen des Programmes